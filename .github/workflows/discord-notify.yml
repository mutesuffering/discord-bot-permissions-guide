name: Discord Notifications (Embed - GitHub style)

on:
  push:

jobs:
  discord_embed:
    runs-on: ubuntu-latest
    steps:
      - name: Send commits as Discord embed
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          set -euo pipefail

          EVENT_FILE="$GITHUB_EVENT_PATH"
          REPO="${{ github.repository }}"
          REF="${{ github.ref }}"
          BRANCH="${REF##*/}"
          ACTOR="${{ github.actor }}"
          AVATAR_URL="https://github.com/${ACTOR}.png"
          COMMITS_COUNT=$(jq '.commits | length' "$EVENT_FILE" 2>/dev/null || echo 0)

          # Fallback if head_commit exists but commits array is empty
          if [ "$COMMITS_COUNT" -eq 0 ]; then
            if jq -e '.head_commit' "$EVENT_FILE" >/dev/null 2>&1; then
              COMMITS_COUNT=1
              # create a temporary commits array from head_commit
              jq '[.head_commit] | {commits: .}' "$EVENT_FILE" > /tmp/evt && EVENT_FILE=/tmp/evt
            fi
          fi

          # Build title like: [repo:branch] 1 new commit
          TITLE="[$REPO:$BRANCH] ${COMMITS_COUNT} new commit(s)"

          # Build description with up to 3 latest commits (newest first)
          DESC=""
          MAX=3
          for i in $(seq 0 $((COMMITS_COUNT-1))); do
            # stop if we already added MAX items
            if [ "$i" -ge "$MAX" ]; then break; fi

            COMMIT_ID=$(jq -r ".commits[$i].id // .commits[$i].sha" "$EVENT_FILE")
            SHORT_ID=$(printf "%.7s" "$COMMIT_ID")
            COMMIT_URL=$(jq -r ".commits[$i].url // empty" "$EVENT_FILE")
            # if commit URL not present, build one using GitHub repo (fallback)
            if [ -z "$COMMIT_URL" ] || [ "$COMMIT_URL" = "null" ]; then
              COMMIT_URL="https://github.com/${REPO}/commit/${COMMIT_ID}"
            fi
            COMMIT_MSG=$(jq -r ".commits[$i].message" "$EVENT_FILE" | tr -d '\r' | awk '{gsub(/\n/, " "); print}')
            COMMIT_AUTHOR=$(jq -r ".commits[$i].author.name // .commits[$i].author.username // .commits[$i].author.email // \"${ACTOR}\"" "$EVENT_FILE")

            # Escape double quotes for later JSON generation
            SAFE_MSG=$(echo "$COMMIT_MSG" | sed 's/"/\\"/g')
            DESC="${DESC}[\`${SHORT_ID}\`](${COMMIT_URL}) ${SAFE_MSG} â€“ ${COMMIT_AUTHOR}"
          done

          # If no commits found, put a generic message
          if [ -z "$DESC" ]; then
            DESC="No commit details available."
          fi

          # Build embed JSON using jq to ensure valid JSON
          JSON_PAYLOAD=$(jq -n \
            --arg author "$ACTOR" \
            --arg avatar "$AVATAR_URL" \
            --arg title "$TITLE" \
            --arg desc "$DESC" \
            --arg repo_url "https://github.com/${REPO}/commits/${BRANCH}" \
            '{
              embeds: [
                {
                  author: { name: $author, icon_url: $avatar },
                  title: $title,
                  url: $repo_url,
                  description: $desc,
                  color: 3447003
                }
              ]
            }')

          # Send to Discord
          curl -sS -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK"